#!/usr/bin/env php
<?php

/*
 * Chameleon
 * 
 * Copyright (C) 2016 Lakona Computers
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Jason Favrod <jason@lakonacomputers.com>
 */

require 'chameleon_header.php';


function main(&$argc, &$argv)
{
    global $mode;

    if ($argc > 1) {
        $mode = strtolower($argv[1]);
        
        init();
        
        if ($mode === 'setup') {
            createLogs();
            createDirs();
            createIndex();
            createCustomCSS();
            requestHandler();
            javascriptConfig();
            setupComposer();
            setupPHPConfigFile();
            configureApache();
        }

        else if ($mode === 'composer')
            setupComposer();

        else if ($mode === 'index')
            createIndex();

        else if ($mode === 'config-php')
            setupPHPConfigFile();

        else if ($mode === 'config-js')
            javascriptConfig();

        else if ($mode === 'config-apache')
            createVHost();

        else if ($mode === 'logs')
            createLogs();
        
        else if ($mode === 'dirs')
            createDirs();

        else
            usage();

        fixFilePermissions();
    }

    else
        usage();

}


/**
 * usage
 *
 * Prints a usage message for the user.
 */

function usage()
{
    print "\nchameleon usage\nchameleon [option]\n";    
    print "options\n\n";

    print "setup:\t\t run this command to initialize a chameleon project.\n";
    print "index:\t\t restore/create the default index.php file.\n";
    print "index:\t\t restore/create the default custom.css file.\n";
    print "config-php:\t (re)configure project\'s PHP (".PHP_CONFIG_FILE.")\n";
    print "config-js:\t (re)configure project\'s JavaScript (".JS_CONFIG_FILE.")\n";
    print "config-apache:\t (re)configure project's Apache configuration.\n";
    print "logs:\t\t (re)create project's log directory and log files.\n";
    
    print "\n";
}


/**
 * init
 * 
 * Sets the following $_SERVER environment variables:
 *  OS           Set to the running operating system.
 *  PROJECT_USER Set to the owner of the containing directory.
 */

function init()
{
    $_SERVER['OS'] = strtolower(posix_uname()['version']);
    $_SERVER['PROJECT_USER'] = $user =
            posix_getpwuid(fileowner(getcwd()))['name'];
    $_SERVER['PROJECT_DIR'] = rtrim(pathinfo(__FILE__)['dirname'], '/bin').'/';

    foreach (explode(',', OSES) as $os) {
        if (preg_match("/$os/", $_SERVER['OS'])) {
            $_SERVER['OS'] = $os;
        }
    }
}


/**
 * createLogs
 * 
 * Creates LOG_DIR if it does not exist, and the LOG_FILES that
 * need to go inside of it.
 */

function createLogs()
{
    if ($_SERVER['SCRIPT_NAME'] === 'chameleon')
        print "\nCreating Logs...\n\n";

    if (!is_dir(rtrim($_SERVER['PROJECT_DIR'].LOG_DIR, '/'))) {
        mkdir(rtrim($_SERVER['PROJECT_DIR'].LOG_DIR, '/'));
    }
    
    foreach (explode(',', LOG_FILES) as $log) {
        if (!is_file($_SERVER['PROJECT_DIR'].LOG_DIR."$log")) {
            file_put_contents($_SERVER['PROJECT_DIR'].LOG_DIR."$log", '');
        }
    }
}


/**
 * createDirs
 * 
 * Creates the $DIRS if it they does not exist.
 */

function createDirs()
{
    if ($_SERVER['SCRIPT_NAME'] === 'chameleon')
        print "\nCreating View Directory...\n\n";
    
    $DIRS = explode(',', DIRS);
    
    foreach ($DIRS as $dir) {
        $dir = rtrim($_SERVER['PROJECT_DIR'].$dir, '/');

        if (!is_dir($dir)) {
            mkdir($dir);
        }
    }
}


/**
 * createIndex
 * 
 * Creates the index file from the INDEX_TEMPLATE if there is no
 * index file.
 */

function createIndex()
{
    print "\nCreating index file...\n\n";

    global $mode;

    if (!is_file('index.php') || $mode === 'index') {
        file_put_contents($_SERVER['PROJECT_DIR'].'index.php',
            file_get_contents($_SERVER['PROJECT_DIR'].INDEX_TEMPLATE));
    }
}


/**
 * createCustomCss
 * 
 */

function createCustomCSS()
{
    print "\nCreating custom css file...\n\n";
    
    if (!is_file($_SERVER['PROJECT_DIR'].CUSTOM_CSS_FILE)) {
        file_put_contents($_SERVER['PROJECT_DIR'].CUSTOM_CSS_FILE, '');
    }
}


/**
 * requestHandler
 * 
 */

function requestHandler()
{
    print "\nSetting up request handler...\n\n";
    
    $useDefault = readline('Would you like to use the default request handler '.
            DEFAULT_REQUEST_HANDLER . "[Y/n]\n-->");
    
    if ($useDefault && strtolower($useDefault)[0] != 'n') {
        if (!file_exists($_SERVER['PROJECT_DIR'].DEFAULT_REQUEST_HANDLER)) {
            file_put_contents($_SERVER['PROJECT_DIR'].DEFAULT_REQUEST_HANDLER,
            file_get_contents($_SERVER['PROJECT_DIR'].REQUEST_HANDLER_TEMPLATE));
        }
    }
}


/**
 * setupComposer
 * 
 * Sets up default composer installation from COMPOSER_JSON_TEMPLATE.
 * Requires composer to be installed.
 */

function setupComposer()
{
    print "\nSetting up Composer...\n\n";
    
    $composerFile = '';
    
    if (file_exists($_SERVER['PROJECT_DIR'].'composer.phar')) {
        $composerFile = $_SERVER['PROJECT_DIR'].'composer.phar';
    }
    else if (file_exists('composer')) {
        $composerFile = $_SERVER['PROJECT_DIR'].'composer';
    }
    else {
        exit("Composer not installed\n");
    }
    
    if (file_exists($_SERVER['PROJECT_DIR'].'composer.json')) {
        unlink($_SERVER['PROJECT_DIR'].'composer.json');
    }
    if (file_exists($_SERVER['PROJECT_DIR'].'composer.lock')) {
        unlink($_SERVER['PROJECT_DIR'].'composer.lock');
    }
    
    file_put_contents($_SERVER['PROJECT_DIR'].'composer.json',
        file_get_contents($_SERVER['PROJECT_DIR'].COMPOSER_JSON_TEMPLATE));
    
    exec('su '.$_SERVER['PROJECT_USER']." -c '$composerFile self-update'");
    exec('su '.$_SERVER['PROJECT_USER']." -c '$composerFile update'");
}


/**
 * setupPHPConfigFile
 * 
 * Takes the PHP_CONFIG_TEMPLATE populates it with necessary items
 * (by asking the user for input) and writes it to the PHP_CONFIG_FILE.
 */

function setupPHPConfigFile()
{
    print "\nCreating PHP Config file ". PHP_CONFIG_FILE . "...\n\n";

    $siteTitle = ask('title');
    $dbConfig  = configureDatabase();
    $config = file_get_contents($_SERVER['PROJECT_DIR'].PHP_CONFIG_TEMPLATE);

    $config = str_replace('|site_title|', $siteTitle, $config);

    if (!empty($dbConfig)) {
        $config = str_replace('|db_name|', $dbConfig['name'], $config);
        $config = str_replace('|db_user|', $dbConfig['user'], $config);
        $config = str_replace('|db_pass|', $dbConfig['pass'], $config);
        $config = str_replace('|db_host|', $dbConfig['host'], $config);
    }

    file_put_contents($_SERVER['PROJECT_DIR'].PHP_CONFIG_FILE, $config);
}


/**
 * configureDatabase
 * 
 * Asks the user for the database details.
 * 
 * @return associative array Containing database details
 * (name, user, pass, host).
 */

function configureDatabase()
{
    $dbConfig = [];
    $goahead = readline("Would you like to set the database connection details? [y|N]\n--> ");

    if ($goahead && strtolower($goahead)[0] === 'y') {
        $dbConfig['name'] = ask('db name');
        $dbConfig['user'] = ask('db user');
        $dbConfig['pass'] = ask('db pass');
        $dbConfig['host'] = ask('db host');
    }

    return $dbConfig;
}


/**
 * javascriptConfig
 * 
 * Configures the resources/js/config.js file from a template in the
 * conf directory.
 */

function javascriptConfig()
{
    print("\nConfiguring Chameleon's JavaScript ...\n");
    
    $jsConf = file_get_contents($_SERVER['PROJECT_DIR'].JS_CONFIG_TEMPLATE);
    $jsConf = str_replace('|REQUEST_URL|', DEFAULT_REQUEST_HANDLER, $jsConf);
    file_put_contents($_SERVER['PROJECT_DIR'].JS_CONFIG_FILE, $jsConf);
}


/**
 * fixFilePermissions
 * 
 */

function fixFilePermissions()
{
    print "\nFixing file permissions...\n\n";
    
    $dirs  = [
        $_SERVER['PROJECT_DIR'].'vendor',
        $_SERVER['PROJECT_DIR'].LOG_DIR,
        $_SERVER['PROJECT_DIR'].VIEWS_DIR,
        $_SERVER['PROJECT_DIR'].RESOURCES_DIR
    ];

    $files = [
        $_SERVER['PROJECT_DIR'].'composer.json',
        $_SERVER['PROJECT_DIR'].'composer.lock',
        $_SERVER['PROJECT_DIR'].'composer.phar',
        $_SERVER['PROJECT_DIR'].'config.php',
        $_SERVER['PROJECT_DIR'].'index.php',
        $_SERVER['PROJECT_DIR'].DEFAULT_REQUEST_HANDLER
    ];

    foreach ($dirs as $dir) {
        if (is_dir($dir)) {
            exec('chown '.$_SERVER['PROJECT_USER'].':'.$_SERVER['PROJECT_USER']." -R $dir");
        }
    }

    foreach ($files as $file) {
        if (is_file($file)) {
            chown($file, $_SERVER['PROJECT_USER']);
            chgrp($file, $_SERVER['PROJECT_USER']);
        }
    }
}


// Run if executing from command line.
if (php_sapi_name() === "cli" &&
    (   $_SERVER['SCRIPT_NAME'] === 'chameleon' ||
        $_SERVER['SCRIPT_NAME'] === './bin/chameleon' ||
        $_SERVER['SCRIPT_NAME'] === 'bin/chameleon'
    )
) {
    if (posix_geteuid() !== 0) {
        print("Please run with root permissions.\n\n");
        usage();
    }
    else {
        main(count($argv), $argv);
    }
}
