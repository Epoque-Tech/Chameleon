#!/usr/bin/env php
<?php

/*
 * Chameleon
 * 
 * Copyright (C) 2016 Lakona Computers
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Jason Favrod <jason@lakonacomputers.com>
 */

$_SERVER['OS'] = null;
$_SERVER['PROJECT_USER'] = null;


define('COMPOSER_JSON_TEMPLATE', 'conf/composer.json');
define('VHOST_TEMPLATE', 'conf/apacheVirtualHost.txt');
define('PHP_CONFIG_TEMPLATE', 'conf/config.php');
define('REQUEST_HANDLER_TEMPLATE', 'conf/RequestHandler.php');
define('JS_CONFIG_TEMPLATE', 'conf/config.js');
define('INDEX_TEMPLATE', 'conf/index.php');
define('PHP_CONFIG_FILE', 'config.php');
define('JS_CONFIG_FILE', 'resources/js/config.js');
define('CUSTOM_CSS_FILE', 'resources/css/custom.css');
define('DEFAULT_REQUEST_HANDLER', 'RequestHandler.php');
define('LOG_DIR', 'log/');
define('RESOURCES_DIR', 'resources/');
define('CSS_DIR', RESOURCES_DIR.'css/');
define('JS_DIR', RESOURCES_DIR.'js/');
define('IMG_DIR', RESOURCES_DIR.'img/');
define('PHP_DIR', RESOURCES_DIR.'php/');
define('VIEWS_DIR', 'views/');
define('UBUNTU_VHOST_DIR', '/etc/apache2/sites-enabled/');

// Comma separated list of log files used in Chameleon.
define('LOG_FILES', 'error.log,access.log,chameleon.log');


function main(&$argc, &$argv)
{
    global $mode;

    if ($argc > 1) {
        $mode = strtolower($argv[1]);
        
        init();
        
        if ($mode === 'setup') {
            enableApacheModules();
            createLogs();
            createDirs();
            createIndex();
            createCustomCSS();
            requestHandler();
            javascriptConfig();
            setupComposer();
            setupPHPConfigFile();
            createVHost();
        }
        else if ($mode === 'composer') {
            setupComposer();
        }
        else if ($mode === 'index') {
            createIndex();
        }
        else if ($mode === 'config-php') {
            setupPHPConfigFile();
        }
        else if ($mode === 'config-js') {
            javascriptConfig();
        }
        else if ($mode === 'config-apache') {
            createVHost();
        }
        else if ($mode === 'logs') {
            createLogs();
        }
        else {
            usage();
        }
        fixFilePermissions();
    }
    else {
        usage();
    }
}


/**
 * usage
 *
 * Prints a usage message for the user.
 */

function usage()
{
    print "\nchameleon usage\nchameleon [option]\n";    
    print "options\n\n";

    print "setup:\t\t run this command to initialize a chameleon project.\n";
    print "index:\t\t restore/create the default index.php file.\n";
    print "index:\t\t restore/create the default custom.css file.\n";
    print "config-php:\t (re)configure project\'s PHP (".PHP_CONFIG_FILE.")\n";
    print "config-js:\t (re)configure project\'s JavaScript (".JS_CONFIG_FILE.")\n";
    print "config-apache:\t (re)configure project's Apache configuration.\n";
    print "logs:\t\t (re)create project's log directory and log files.\n";
    
    print "\n";
}


/**
 * init
 * 
 * Sets the following $_SERVER environment variables:
 *  OS           Set to the running operating system.
 *  PROJECT_USER Set to the owner of the containing directory.
 */

function init()
{
    $_SERVER['OS'] = strtolower(posix_uname()['version']);
    $_SERVER['PROJECT_USER'] = $user =
            posix_getpwuid(fileowner(getcwd()))['name'];
}


/**
 * createLogs
 * 
 * Creates LOG_DIR if it does not exist, and the LOG_FILES that
 * need to go inside of it.
 */

function createLogs()
{
    print "\nCreating Logs...\n\n";

    if (!is_dir(rtrim(LOG_DIR, '/'))) {
        mkdir(rtrim(LOG_DIR, '/'));
    }
    
    foreach (explode(LOG_FILES, ',') as $log) {
        if (!is_file(LOG_DIR."$log")) {
            file_put_contents(LOG_DIR."$log", '');
        }
    }
}


/**
 * createDirs
 * 
 * Creates the $DIRS if it they does not exist.
 */

function createDirs()
{
    print "\nCreating View Directory...\n\n";
    
    $DIRS = [
        LOG_DIR,
        VIEWS_DIR,
        RESOURCES_DIR,
        CSS_DIR,
        JS_DIR,
        IMG_DIR,
        PHP_DIR,
    ];
    
    foreach ($DIRS as $dir) {
        $dir = rtrim($dir, '/');

        if (!is_dir($dir)) {
            mkdir($dir);
        }
    }
}


/**
 * createIndex
 * 
 * Creates the index file from the INDEX_TEMPLATE if there is no
 * index file.
 */

function createIndex()
{
    print "\nCreating index file...\n\n";

    if (!is_file('index.php') || $mode === 'index') {
        file_put_contents('index.php', file_get_contents(INDEX_TEMPLATE));
    }
}


/**
 * createCustomCss
 * 
 */

function createCustomCSS()
{
    print "\nCreating custom css file...\n\n";
    
    if (!is_file(CUSTOM_CSS_FILE)) {
        file_put_contents(CUSTOM_CSS_FILE, '');
    }
}


/**
 * requestHandler
 * 
 */

function requestHandler()
{
    print "\nSetting up request handler...\n\n";
    
    $useDefault = readline('Would you like to use the default request handler '.
            DEFAULT_REQUEST_HANDLER . "[Y/n]\n-->");
    
    if ($useDefault && strtolower($useDefault)[0] != 'n') {
        if (!file_exists(DEFAULT_REQUEST_HANDLER)) {
            file_put_contents(DEFAULT_REQUEST_HANDLER, file_get_contents(REQUEST_HANDLER_TEMPLATE));
        }
    }
}


/**
 * setupComposer
 * 
 * Sets up default composer installation from COMPOSER_JSON_TEMPLATE.
 * Requires composer to be installed.
 */

function setupComposer()
{
    print "\nSetting up Composer...\n\n";
    
    $composerFile = '';
    
    if (file_exists('composer.phar')) {
        $composerFile = 'composer.phar';
    }
    else if (file_exists('composer')) {
        $composerFile = 'composer';
    }
    else {
        exit("Composer not installed\n");
    }
    
    if (file_exists('composer.json')) {
        unlink('composer.json');
    }
    if (file_exists('composer.lock')) {
        unlink('composer.lock');
    }
    
    file_put_contents('composer.json', file_get_contents(COMPOSER_JSON_TEMPLATE));
    
    exec('su '.$_SERVER['PROJECT_USER'].' -c "./composer.phar self-update"');
    exec('su '.$_SERVER['PROJECT_USER'].' -c "./composer.phar update"');
}


/**
 * setupPHPConfigFile
 * 
 * Takes the PHP_CONFIG_TEMPLATE populates it with necessary items
 * (by asking the user for input) and writes it to the PHP_CONFIG_FILE.
 */

function setupPHPConfigFile()
{
    print "\nCreating PHP Config file ". PHP_CONFIG_FILE . "...\n\n";

    $siteTitle = ask('title');
    $dbConfig  = configureDatabase();
    $config = file_get_contents(PHP_CONFIG_TEMPLATE);

    $config = str_replace('|site_title|', $siteTitle, $config);

    if (!empty($dbConfig)) {
        $config = str_replace('|db_name|', $dbConfig['name'], $config);
        $config = str_replace('|db_user|', $dbConfig['user'], $config);
        $config = str_replace('|db_pass|', $dbConfig['pass'], $config);
        $config = str_replace('|db_host|', $dbConfig['host'], $config);
    }

    file_put_contents(PHP_CONFIG_FILE, $config);
}


/**
 * configureDatabase
 * 
 * Asks the user for the database details.
 * 
 * @return associative array Containing database details
 * (name, user, pass, host).
 */

function configureDatabase()
{
    $dbConfig = [];
    $goahead = readline("Would you like to set the database connection details? [y|N]\n--> ");

    if ($goahead && strtolower($goahead)[0] === 'y') {
        $dbConfig['name'] = ask('db name');
        $dbConfig['user'] = ask('db user');
        $dbConfig['pass'] = ask('db pass');
        $dbConfig['host'] = ask('db host');
    }

    return $dbConfig;
}


/**
 * javascriptConfig
 * 
 * Configures the resources/js/config.js file from a template in the
 * conf directory.
 */

function javascriptConfig()
{
    print("\nConfiguring Chameleon's JavaScript ...\n");
    
    $jsConf = file_get_contents(JS_CONFIG_TEMPLATE);
    $jsConf = str_replace('|REQUEST_URL|', DEFAULT_REQUEST_HANDLER, $jsConf);
    file_put_contents(JS_CONFIG_FILE, $jsConf);
}


/**
 * fixFilePermissions
 * 
 */

function fixFilePermissions()
{
    print "\nFixing file permissions...\n\n";
    
    $dirs  = ['vendor', LOG_DIR, VIEWS_DIR, RESOURCES_DIR];
    $files = [ 'composer.json', 'composer.lock', 'composer.phar', 'config.php',
               'index.php', DEFAULT_REQUEST_HANDLER];

    foreach ($dirs as $dir) {
        if (is_dir($dir)) {
            exec('chown '.$_SERVER['PROJECT_USER'].':'.$_SERVER['PROJECT_USER']." -R $dir");
        }
    }

    foreach ($files as $file) {
        if (is_file($file)) {
            chown($file, $_SERVER['PROJECT_USER']);
            chgrp($file, $_SERVER['PROJECT_USER']);
        }
    }
}


/**
 * enableApacheModules
 * 
 */

function enableApacheModules()
{
    if (preg_match('/ubuntu/', $_SERVER['OS'])) {
        $_SERVER['OS'] = 'ubuntu';
        exec('a2enmod rewrite');
    }
}


/**
 * createVHost
 * 
 */

function createVHost()
{
    print "\nCreating Apache VirtualHost...\n\n";

    $ip          = ask('for ip');
    $serverAdmin = ask('server admin');
    $docRoot     = ask('doc root');
    $serverName  = ask('server name');
    $vhostTemp   = file_get_contents(VHOST_TEMPLATE);
    $vhostFile   = UBUNTU_VHOST_DIR."$serverName.conf";

    $vhostTemp = str_replace('ip', $ip, $vhostTemp);
    $vhostTemp = str_replace('server_admin', $serverAdmin, $vhostTemp);
    $vhostTemp = str_replace('doc_root', $docRoot, $vhostTemp);
    $vhostTemp = str_replace('server_name', $serverName, $vhostTemp);

    file_put_contents($vhostFile, $vhostTemp);
    exec('apachectl restart');
}


/**
 * restartApache
 *
 * Restarts the Apache server. Prints an error message if it fails.
 */

function restartApache()
{
    $output = null;
    $return = null;

    if (config::$platform === 'freebsd') {
        exec('apachectl reload', $output, $return);
    }
    else {
        exec('apachectl restart', $output, $return);
    }

    if ($return != 0) {
        "Restarting Apache failed.\n";
    }
}


/**
 * ask (subroutine)
 * 
 * A routine for asking the user for configuration info and
 * returning that info.
 * 
 * @param string $question
 * @return string The answer to the given question.
 */

function ask($question)
{
    $answer = $confirm = '';
    list($prompt, $default, $goahead) = [0, 1, 2];
    
    $optional = [
        'for ip' => [
            "Please provide the IP address of the server\n--> ",
            '*',
            "an IP address for the VirtualHost? [y|N]\n--> "
        ],
        'server admin' => [
            "Please provide the ServerAdmin email\n--> ",
            'webmaster@localhost',
            "a ServerAdmin? [y|N]\n--> "
        ]
    ];
    
    $required = [
        'title' => ["What is the site's title?\n--> "],
        'db name' => ["Please enter db name\n--> "],
        'db user' => ["Please enter db user\n--> "],
        'db pass' => ["Please enter db password\n--> "],
        'db host' => ["Please enter db hostname\n--> "],
        'doc root' => ["Please provide the DocumentRoot of the VirtualHost\n--> "],
        'server name' => ["What is the ServerName of the VirtualHost?\n--> "]
    ];

    
    if (array_key_exists($question, $optional)) {
        print 'Would you like to specify ';
        $answer = readline($optional[$question][$goahead]);
        
        if (!$answer || strtolower($answer)[0] !== 'y') {
            $answer = $optional[$question][$default];
        }
        else {
            do {
                $answer = readline($optional[$question][$prompt]);
            }
            while (confirm($answer) === false);
        }
    }
    else {
        do {
            $answer = readline($required[$question][$prompt]);
        }
        while (confirm($answer) === false);
    }
    
    print "\n";
    return $answer;
}


/**
 * confirm
 * 
 * Asks the user if the given answer is correct.
 * 
 * @param string $answer Comes from the ask function.
 * @return boolean True if the user confirms their answer,
 * false otherwise.
 */

function confirm($answer)
{
    $confirmation = readline("Is $answer correct? [y|N]\n--> ");
    
    if (!$confirmation || strtolower($confirmation)[0] !== 'y') {
        return false;
    }
    else {
        return true;
    }
}


// Run if executing from command line.
if (php_sapi_name() === "cli") {
    if (posix_geteuid() !== 0) {
        exit("Please run with root permissions.");
    }
    else {
        main(count($argv), $argv);
    }
}
