#!/bin/bash
#
# Chameleon
# 
# Copyright (C) 2016 Lakona Computers
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# @author Jason Favrod <jason@lakonacomputers.com>
#

source bin/chameleon-install.bash import
CMD=$1
MOD=$2


main()
{
    if [ "$CMD" == "setup" ]; then
        setup
    elif [ "$CMD" == "update" ]; then
        update
    elif [ "$CMD" == "init" ]; then
        init
    elif [ "$CMD" == "vhost" ]; then
        vhost
    elif [ "$CMD" == "enable" ]; then
        enable
    elif [ "$CMD" == "disable" ]; then
        disable
    elif
        [ "$CMD" == "minify" ]; then
        source bin/minify.bash
        minify
    else
        usage
    fi
}


usage()
{
    echo "usage: chameleon [command]"
    echo ""
    echo "commands"
    echo "setup: setup a new project"
    echo "update: update chameleon and dependencies"
    echo "init: LAMP packages are installed and perms configured"
    echo "enable/disable [module]: turn on/off chameleon modules"
    echo ""
    echo "modules:"
    echo "draft - A module for drafting and publishing text."
}


setup()
{
    init
    index
    favicon
    views
    config
    logs
    composer
    perms
    create_vhost
}


update()
{
    composer
    #git pull chameleon_upstream master
}


init()
{
    init
    perms
}


vhost()
{
    create_vhost
}


enable()
{
    if [ $MOD == "draft" ]; then
        enable_draft
    fi
}


disable()
{
    if [ $MOD == "draft" ]; then
        disable_draft
    fi
}


init()
{
    lamp_installed

    if [ $? -eq 1 ]; then
        echo "Installing required LAMP packages..."
        install_lamp_packages
    fi

    sudo a2enmod rewrite
}


#
# Returns 0, if LAMP_PACKAGES are installed; 1 otherwise.
#

function lamp_installed
{
    local dpkg=/usr/bin/dpkg
    
    echo "Confirming LAMP installation..."

    $sudo -v 

    for package in $LAMP_PACKAGES; do
        if [ $debug -gt 0 ]; then
            echo "Verifing package: $package."
        fi

        $sudo $dpkg -s $package > /dev/null

        if [ $? -eq 1 ]; then
            return 1
        fi
    done

    return 0
}


#
# install_lamp_packages
#

function install_lamp_packages
{
    printf "Installing LAMP_PACKAGES... "

    $sudo $aptget install -q=2 $LAMP_PACKAGES 

    if [ $? -gt 0 ];then
        echo "Installing LAMP_PACKAGES failed."
    else
        echo "Installing LAMP_PACKAGES successful."
    fi
}


index()
{
    if [ ! -f "index.php" ]; then
        cp conf/index.php .
    fi
}


favicon()
{
    if [ ! -f "favicon.ico" ]; then
        cp conf/favicon.ico .
    fi
}


views()
{
    if [ ! -d "views" ]; then
        mkdir views
    fi
}


config()
{
    if [ ! -f "config.php" ]; then
        cp conf/config.php .
    fi
}


logs()
{
    if [ ! -d "log" ]; then
        mkdir log
    fi

    for f in chameleon.log access.log; do
        if [ ! -f "log/$f" ]; then
            touch "log/$f"
        fi
    done
}


composer()
{
    if [ ! -f "composer.json" ]; then
        cp conf/composer.json .
    fi

    ./bin/composer update
}


create_vhost()
{
    sudo bin/createVhost.php $vhost_template
}


create_logs()
{
    touch log/access.log
    touch log/error.log
}


perms()
{
    sudo chgrp -R $www_group .
    sudo chmod g+rwx .
    sudo chmod g+s .
}


enable_draft()
{
    ./bin/composer require "epoque/php @dev"

    if [ ! -d "resources/requests" ];then
        mkdir resources/requests
    fi

    cp conf/views/draft.php views/
    cp conf/resources/requests/draft.php resources/requests/
    cp conf/resources/js/draft.js resources/js
    cp conf/resources/sql/drafts.db resources/sql/drafts.db
    cp conf/resources/sql/drafts.schema.sql resources/sql/drafts.schema.sql
}


main

